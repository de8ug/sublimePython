(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{159:function(s,t,n){},163:function(s,t,n){"use strict";var e=n(159);n.n(e).a},185:function(s,t,n){"use strict";n.r(t);n(163);var e=n(0),a=Object(e.a)({},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[s._m(0),s._v(" "),s._m(1),s._v(" "),s._m(2),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not",target:"_blank",rel:"noopener noreferrer"}},[s._v("boolean:"),n("OutboundLink")],1),s._v("  bool类型，判断真假，可搭配and，or，not使用")])]),s._v(" "),n("p",[s._v("以下的值都为False，其他的为True")]),s._v(" "),s._m(3),s._m(4),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex",target:"_blank",rel:"noopener noreferrer"}},[s._v("int,float,complex :"),n("OutboundLink")],1),s._v(" 数字类型，整数，浮点数，复数")])]),s._v(" "),s._m(5),s._v(" "),n("p",[s._v("序列类型：字符串，Unicode字符串，列表，元组，字节数组，缓冲区和xrange对象。\n其中str，list，tuple更为常用。")]),s._v(" "),n("p",[s._v("字符串文字用单引号或双引号写入：'xyzzy'，\"frobozz\"。Unicode字符串很像字符串，但是在语法中使用前面的'u'字符指定：u'abc'，u\"def\"。除了这里描述的功能之外，字符串方法部分中还描述了特定于字符串的方法。列表用方括号构成，用逗号分隔项目：[a, b, c]。元组由逗号运算符（不在方括号内）构造，带或不带括号括起来，但空元组必须带括号括起来的括号，如a, b, c或()。单个元组元组必须具有尾随逗号，例如(d,)。")]),s._v(" "),n("p",[s._v("Bytearray对象是使用内置函数创建的bytearray()。")]),s._v(" "),n("p",[s._v("缓冲区对象不直接受Python语法支持，但可以通过调用内置函数来创建buffer()。他们不支持连接或重复。")]),s._v(" "),n("p",[s._v("xrange类型的对象类似于缓冲区，因为没有特定的语法来创建它们，但是它们是使用xrange()函数创建的。它们不支持切片，串联或重复使用in，not in，min()或max()对它们是无效的。")]),s._v(" "),n("p",[s._v("大多数序列类型支持以下操作。在in和not in操作具有比较操作相同的优先级。在+与*操作具有相同的优先级对应的数字运算。[3]为可变序列类型提供了其他方法。")]),s._v(" "),s._m(6),s._v(" "),s._m(7),n("p",[s._v("更多"),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/stdtypes.html#textseq",target:"_blank",rel:"noopener noreferrer"}},[s._v("内容"),n("OutboundLink")],1)]),s._v(" "),s._m(8),s._v(" "),n("p",[s._v("列表数据类型还有很多的方法。这里是列表对象方法的清单：")]),s._v(" "),s._m(9),n("p",[s._v("列表方法示例：")]),s._v(" "),s._m(10),s._m(11),s._v(" "),s._m(12),s._v(" "),n("p",[s._v("列表方法使得列表作为堆栈非常容易，最后一个插入，最先取出（“后进先出”）。要添加一个元素到堆栈的顶端，使用 append() 。要从堆栈顶部取出一个元素，使用 pop() ，不用指定索引。例如")]),s._v(" "),s._m(13),s._m(14),s._v(" "),n("p",[s._v("列表也可以用作队列，其中先添加的元素被最先取出 (“先进先出”)；然而列表用作这个目的相当低效。因为在列表的末尾添加和弹出元素非常快，但是在列表的开头插入或弹出元素却很慢 (因为所有的其他元素都必须移动一位)。")]),s._v(" "),n("p",[s._v("若要实现一个队列， collections.deque 被设计用于快速地从两端操作。例如")]),s._v(" "),s._m(15),s._m(16),s._v(" "),n("p",[s._v("列表推导式提供了一个更简单的创建列表的方法。常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后使用其结果来创建列表，或者通过满足某些特定条件元素来创建子序列。")]),s._v(" "),n("p",[s._v("例如，假设我们想创建一个平方列表，像这样")]),s._v(" "),s._m(17),s._m(18),s._v(" "),s._m(19),n("p",[s._v("关于本行中星号的详细说明，参见 "),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/tutorial/controlflow.html#tut-unpacking-arguments",target:"_blank",rel:"noopener noreferrer"}},[s._v("解包参数列表"),n("OutboundLink")],1),s._v("。")]),s._v(" "),s._m(20),s._v(" "),n("p",[s._v("一个元组由几个被逗号隔开的值组成，例如")]),s._v(" "),s._m(21),n("p",[s._v("如你所见，元组在输出时总是被圆括号包围的，以便正确表示嵌套元组。输入时圆括号可有可无，不过经常会是必须的（如果这个元组是一个更大的表达式的一部分）。给元组中的一个单独的元素赋值是不允许的，当然你可以创建包含可变对象的元组，例如列表。")]),s._v(" "),n("p",[s._v("虽然元组可能看起来与列表很像，但它们通常是在不同的场景被使用，并且有着不同的用途。元组是 "),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/glossary.html#term-immutable",target:"_blank",rel:"noopener noreferrer"}},[s._v("immutable （不可变的）"),n("OutboundLink")],1),s._v("，其序列通常包含不同种类的元素，并且通过解包（这一节下面会解释）或者索引来访问（如果是 namedtuples 的话甚至还可以通过属性访问）。列表是 "),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/glossary.html#term-mutable",target:"_blank",rel:"noopener noreferrer"}},[s._v("mutable （可变的）"),n("OutboundLink")],1),s._v("，并且列表中的元素一般是同种类型的，并且通过迭代访问。")]),s._v(" "),n("p",[s._v("一个特殊的问题是构造包含0个或1个元素的元组：为了适应这种情况，语法有一些额外的改变。空元组可以直接被一对空圆括号创建，含有一个元素的元组可以通过在这个元素后添加一个逗号来构建（圆括号里只有一个值的话不够明确）。丑陋，但是有效。例如")]),s._v(" "),s._m(22),s._m(23),s._v(" "),s._m(24),s._v(" "),n("p",[s._v("下面我们先定义一个字典d，然后介绍字典的相关操作和代码示例。")]),s._v(" "),s._m(25),s._v(" "),s._m(26),s._v(" "),n("hr"),s._v(" "),s._m(27),s._v(" "),n("p",[s._v("官网总入口: "),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/index.html"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("以下为DE8UG总结的比较重点和常用的一些：")]),s._v(" "),s._m(28),s._v(" "),s._m(29),s._v(" "),n("p",[s._v("提供 Base16、Base32、Base64 格式的编码和解码。")]),s._v(" "),s._m(30),s._v(" "),s._m(31),s._v(" "),n("p",[s._v("封装了常用的数学函数（开方、指数、对数、三角函数......）")]),s._v(" "),s._m(32),s._v(" "),n("p",[s._v("进行随机数生成")]),s._v(" "),s._m(33),s._m(34),s._v(" "),s._m(35),s._v(" "),n("p",[s._v("正则表达式")]),s._v(" "),s._m(36),s._v(" "),s._m(37),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/time.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/time.html"),n("OutboundLink")],1)]),s._v(" "),s._m(38),s._v(" "),s._m(39),s._v(" "),n("p",[s._v("常见的操作系统相关功能。"),n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/os.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/os.html"),n("OutboundLink")],1)]),s._v(" "),s._m(40),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/io.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/io.html"),n("OutboundLink")],1)]),s._v(" "),s._m(41),s._v(" "),n("p",[s._v("更方便的处理文件路径 https://github.com/jaraco/path.py")]),s._v(" "),s._m(42),s._v(" "),n("p",[s._v("提供了一些比较高级的文件和目录操作（目录递归复制、目录递归删除、目录压缩打包...）\n示例：")]),s._v(" "),s._m(43),s._m(44),s._v(" "),n("p",[s._v("用于查找文件，【支持通配符】（* 和 ?）")]),s._v(" "),s._m(45),s._m(46),s._v(" "),n("p",[s._v("用于匹配文件名（支持通配符，类似上面的 glob）")]),s._v(" "),s._m(47),s._m(48),s._v(" "),n("p",[s._v("安全地生成临时文件或临时目录")]),s._v(" "),s._m(49),s._v(" "),n("p",[s._v("属于Python里面io模块的一种，和文本io类似，只不过是在内存里处理文本流数据。")]),s._v(" "),s._m(50),n("p",[s._v("https://docs.python.org/zh-cn/3/library/io.html?highlight=stringio")]),s._v(" "),s._m(51),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/csv.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/csv.html"),n("OutboundLink")],1)]),s._v(" "),s._m(52),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/configparser.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/configparser.html"),n("OutboundLink")],1)]),s._v(" "),s._m(53),s._v(" "),s._m(54),s._v(" "),n("p",[s._v("此模块为需要数据压缩的程序提供了一系列函数，用于压缩和解压缩。这些函数使用了 zlib 库。zlib 库的项目主页是 http://www.zlib.net. 版本低于 1.1.3 的 zlib 与此 Python 模块之间存在已知的不兼容。1.1.3 版本的 zlib 存在一个安全漏洞，我们推荐使用 1.1.4 或更新的版本。")]),s._v(" "),n("p",[s._v("zlib 的函数有很多选项，一般需要按特定顺序使用。Python文档没有覆盖全部的用法。更多详细信息请于 http://www.zlib.net/manual.html 参阅官方手册。")]),s._v(" "),n("p",[s._v("https://docs.python.org/zh-cn/3/library/zlib.html")]),s._v(" "),s._m(55),s._v(" "),s._m(56),s._v(" "),s._m(57),s._v(" "),s._m(58),s._v(" "),s._m(59),s._v(" "),s._m(60),s._v(" "),s._m(61),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.python.org/zh-cn/3/library/exceptions.html#Exception",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://docs.python.org/zh-cn/3/library/exceptions.html#Exception"),n("OutboundLink")],1)]),s._v(" "),s._m(62),s._v(" "),s._m(63),s._v(" "),n("p",[s._v("提供了比较高层的线程封装 API。它本身包含了线程同步/互斥的机制。")]),s._v(" "),n("p",[s._v("代码示例——基于“函数”的线程")]),s._v(" "),s._m(64),n("p",[s._v("代码示例——基于“类”的线程")]),s._v(" "),s._m(65),s._m(66),s._v(" "),n("p",[s._v("用于进程管理，可以启动子进程，通过标准输入输出跟子进程交互。")]),s._v(" "),n("p",[s._v("代码示例——启动命令行进程，并获取该进程的标准输出")]),s._v(" "),s._m(67),s._m(68),s._v(" "),n("p",[s._v("它是 2.6 版本加入到标准库的，其 API 接口的风格类似于 threading 模块。")]),s._v(" "),n("p",[s._v("它本身包含了进程同步/互斥的机制。")]),s._v(" "),n("p",[s._v("代码示例——利用其 Lock 机制，确保多个子进程的标准输出不会混杂（每次只有一个进程调用 print）。")]),s._v(" "),s._m(69),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("学习路上遇到问题？")]),s._v(" "),n("p",[s._v("欢迎随时在"),n("a",{attrs:{href:"https://github.com/de8ug/spt/issues",target:"_blank",rel:"noopener noreferrer"}},[s._v("工单"),n("OutboundLink")],1),s._v("\n或直接公众号"),n("code",[s._v("DE8UG小灶时间")]),s._v("留言进行提问")])])])},[function(){var s=this.$createElement,t=this._self._c||s;return t("h1",{attrs:{id:"python基础知识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python基础知识","aria-hidden":"true"}},[this._v("#")]),this._v(" Python基础知识")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本数据类型")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#boolean","aria-hidden":"true"}},[this._v("#")]),this._v(" boolean")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("None\nFalse\n任何数字类型，例如零，0，0L，0.0，0j。\n任何空序列，例如''，()，[]。\n例如，任何空映射{}。\n用户定义的类的实例，如果该类定义了一个__nonzero__()or __len__()方法，则该方法返回整数零或bool值False\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"int-float-complex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int-float-complex","aria-hidden":"true"}},[this._v("#")]),this._v(" int,float,complex")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"str-unicode-list-tuple-bytearray-buffer-xrange"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#str-unicode-list-tuple-bytearray-buffer-xrange","aria-hidden":"true"}},[this._v("#")]),this._v(" str, unicode, list, tuple, bytearray, buffer, xrange")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#str","aria-hidden":"true"}},[this._v("#")]),this._v(" str")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("str.capitalize()\n\n返回字符串的一个副本，其首字母大写，其余的小写。\n\nstr.center(width[, fillchar])\n\n返回以一个长度宽度的字符串为中心。填充是使用指定的fillchar完成的（默认为空格）。\nstr.count(sub[, start[, end]])\n\n返回范围start，end 中子串sub的非重叠次数。可选参数开始和结束被解释为切片符号。\n\nstr.decode([encoding[, errors]])\n\n使用注册编码的编码解码器解码字符串。编码默认为默认的字符串编码。可能会给出错误来设置不同的错误处理方案。默认值是'strict'，意味着编码错误会增加UnicodeError。其他可能的值是'ignore'，'replace'并且通过注册的任何其他名称codecs.register_error()\n\nstr.encode([encoding[, errors]])\n\n返回字符串的编码版本。默认编码是当前的默认字符串编码。可能会给出错误来设置不同的错误处理方案。错误的默认值是'strict'，这意味着编码错误会引发一个错误UnicodeError。其他可能的值'ignore'，'replace'，'xmlcharrefreplace'，'backslashreplace'并通过注册的任何其他名称codecs.register_error()\n\n\nstr.endswith(suffix[, start[, end]])\n\n返回True字符串是否与指定的结束后缀，否则返回False。后缀也可以是后缀的元组来查找。随着可选启动，测试开始在那个位置。选择结束时，停止在该位置进行比较。\n\nstr.find(sub[, start[, end]])\n\n返回切片中找到substring 子字符串的最低索引s[start:end]。可选参数开始和结束被解释为切片符号。-1如果未找到子项，则返回。\n\n注释\n\nfind()只有在您需要知道sub的位置时才应该使用该方法。要检查sub是否是子字符串，请使用in运算符：\n\n>>> 'Py' in 'Python'\nTrue\nstr.format(*args, **kwargs)\n\n执行字符串格式化操作。调用此方法的字符串可以包含由大括号分隔的文本文本或替换字段{}。每个替换字段包含位置参数的数字索引或关键字参数的名称。返回字符串的副本，其中每个替换字段将替换为相应参数的字符串值。\n字符串和Unicode对象有一个独特的内置操作：%操作符\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"list列表特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list列表特性","aria-hidden":"true"}},[this._v("#")]),this._v(" list列表特性")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("list.append(x)\n在列表的末尾添加一个元素。相当于 a[len(a):] = [x] 。\n\nlist.extend(iterable)\n使用可迭代对象中的所有元素来扩展列表。相当于 a[len(a):] = iterable 。\n\nlist.insert(i, x)\n在给定的位置插入一个元素。第一个参数是要插入的元素的索引，所以 a.insert(0, x) 插入在列表头部， a.insert(len(a), x) 等同于 a.append(x) 。\n\nlist.remove(x)\n移除列表中第一个值为 x 的元素。如果没有这样的元素，则抛出 ValueError 异常。\n\nlist.pop([i])\n删除列表中给定位置的元素并返回它。如果没有给定位置，a.pop() 将会删除并返回列表中的最后一个元素。（ 方法签名中 i 两边的方括号表示这个参数是可选的，而不是要你输入方括号。你会在 Python 参考库中经常看到这种表示方法)。\n\nlist.clear()\n删除列表中所有的元素。相当于 del a[:] 。\n\nlist.index(x[, start[, end]])\n返回列表中第一个值为 x 的元素的从零开始的索引。如果没有这样的元素将会抛出 ValueError 异常。\n\n可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是 start 参数。\n\nlist.count(x)\n返回元素 x 在列表中出现的次数。\n\nlist.sort(key=None, reverse=False)\n对列表中的元素进行排序（参数可用于自定义排序，解释请参见 sorted()）。\n\nlist.reverse()\n反转列表中的元素。\n\nlist.copy()\n返回列表的一个浅拷贝。相当于 a[:] 。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\n>>> fruits.count('apple')\n2\n>>> fruits.count('tangerine')\n0\n>>> fruits.index('banana')\n3\n>>> fruits.index('banana', 4)  # Find next banana starting a position 4\n6\n>>> fruits.reverse()\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n>>> fruits.append('grape')\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']\n>>> fruits.sort()\n>>> fruits\n['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']\n>>> fruits.pop()\n'pear'\n你可能已经注意到，像 insert ，remove 或者 sort 方法，只修改列表，没有打印出返回值——它们返回默认值 None 。[1] 这是Python中所有可变数据结构的设计原则。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"列表的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表的应用","aria-hidden":"true"}},[this._v("#")]),this._v(" 列表的应用")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h4",{attrs:{id:"_1-列表作为栈使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-列表作为栈使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 列表作为栈使用")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> stack = [3, 4, 5]\n>>> stack.append(6)\n>>> stack.append(7)\n>>> stack\n[3, 4, 5, 6, 7]\n>>> stack.pop()\n7\n>>> stack\n[3, 4, 5, 6]\n>>> stack.pop()\n6\n>>> stack.pop()\n5\n>>> stack\n[3, 4]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h4",{attrs:{id:"_2-列表作为队列使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-列表作为队列使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 列表作为队列使用")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> from collections import deque\n>>> queue = deque([\"Eric\", \"John\", \"Michael\"])\n>>> queue.append(\"Terry\")           # Terry arrives\n>>> queue.append(\"Graham\")          # Graham arrives\n>>> queue.popleft()                 # The first to arrive now leaves\n'Eric'\n>>> queue.popleft()                 # The second to arrive now leaves\n'John'\n>>> queue                           # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h4",{attrs:{id:"_3-列表推导式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-列表推导式","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. 列表推导式")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> squares = []\n>>> for x in range(10):\n...     squares.append(x**2)\n...\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n注意这里创建（或被重写）的名为 x 的变量在for循环后仍然存在。我们可以计算平方列表的值而不会产生任何副作用\n\nsquares = list(map(lambda x: x**2, range(10)))\n或者，等价于\n\nsquares = [x**2 for x in range(10)]\n上面这种写法更加简洁易读。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("blockquote",[t("p",[this._v("列表推导式的结构是由一对方括号所包含的以下内容：一个表达式，后面跟一个 for 子句，然后是零个或多个 for 或 if 子句。 其结果将是一个新列表，由对表达式依据后面的 for 和 if 子句的内容进行求值计算而得出。 举例来说，以下列表推导式会将两个列表中不相等的元素组合起来:")])])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n而它等价于\n\n>>>\n>>> combs = []\n>>> for x in [1,2,3]:\n...     for y in [3,1,4]:\n...         if x != y:\n...             combs.append((x, y))\n...\n>>> combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n注意在上面两个代码片段中， for 和 if 的顺序是相同的。\n\n如果表达式是一个元组（例如上面的 (x, y)），那么就必须加上括号\n\n>>>\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # create a new list with the values doubled\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n>>> # filter the list to exclude negative numbers\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n>>> # apply a function to all the elements\n>>> [abs(x) for x in vec]\n[4, 2, 0, 2, 4]\n>>> # call a method on each element\n>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\n>>> [weapon.strip() for weapon in freshfruit]\n['banana', 'loganberry', 'passion fruit']\n>>> # create a list of 2-tuples like (number, square)\n>>> [(x, x**2) for x in range(6)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>> # the tuple must be parenthesized, otherwise an error is raised\n>>> [x, x**2 for x in range(6)]\n  File \"<stdin>\", line 1, in <module>\n    [x, x**2 for x in range(6)]\n               ^\nSyntaxError: invalid syntax\n>>> # flatten a list using a listcomp with two 'for'\n>>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n>>> [num for elem in vec for num in elem]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n列表推导式可以使用复杂的表达式和嵌套函数\n\n>>>\n>>> from math import pi\n>>> [str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n5.1.4. 嵌套的列表推导式\n列表推导式中的初始表达式可以是任何表达式，包括另一个列表推导式。\n\n考虑下面这个 3x4的矩阵，它由3个长度为4的列表组成\n\n>>>\n>>> matrix = [\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12],\n... ]\n下面的列表推导式将交换其行和列\n\n>>>\n>>> [[row[i] for row in matrix] for i in range(4)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n如上节所示，嵌套的列表推导式是基于跟随其后的 for 进行求值的，所以这个例子等价于:\n\n>>>\n>>> transposed = []\n>>> for i in range(4):\n...     transposed.append([row[i] for row in matrix])\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n反过来说，也等价于\n\n>>>\n>>> transposed = []\n>>> for i in range(4):\n...     # the following 3 lines implement the nested listcomp\n...     transposed_row = []\n...     for row in matrix:\n...         transposed_row.append(row[i])\n...     transposed.append(transposed_row)\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n实际应用中，你应该会更喜欢使用内置函数去组成复杂的流程语句。 zip()函数将会很好地处理这种情况\n\n>>>\n>>> list(zip(*matrix))\n[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"tuple元组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tuple元组","aria-hidden":"true"}},[this._v("#")]),this._v(" tuple元组")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(">>>\n>>> t = 12345, 54321, 'hello!'\n>>> t[0]\n12345\n>>> t\n(12345, 54321, 'hello!')\n>>> # Tuples may be nested:\n... u = t, (1, 2, 3, 4, 5)\n>>> u\n((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))\n>>> # Tuples are immutable:\n... t[0] = 88888\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'tuple' object does not support item assignment\n>>> # but they can contain mutable objects:\n... v = ([1, 2, 3], [3, 2, 1])\n>>> v\n([1, 2, 3], [3, 2, 1])\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\n>>>\n>>> empty = ()\n>>> singleton = 'hello',    # <-- note trailing comma\n>>> len(empty)\n0\n>>> len(singleton)\n1\n>>> singleton\n('hello',)\n语句 t = 12345, 54321, 'hello!' 是 元组打包 的一个例子：值 12345, 54321 和 'hello!' 被打包进元组。其逆操作也是允许的\n\n>>>\n>>> x, y, z = t\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[this._v("这被称为 "),t("strong",[this._v("序列解包")]),this._v(" 也是很恰当的，因为解包操作的等号右侧可以是任何序列。序列解包要求等号左侧的变量数与右侧序列里所含的元素数相同。注意可变参数其实也只是元组打包和序列解包的组合。")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"dict字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dict字典","aria-hidden":"true"}},[this._v("#")]),this._v(" dict字典")])},function(){var s=this.$createElement,t=this._self._c||s;return t("p",[t("code",[this._v("d = dict([('two', 2), ('one', 1), ('three', 3)])")])])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("table",[n("thead",[n("tr",[n("th",[s._v("操作")]),s._v(" "),n("th",[s._v("含义")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("list(d)")]),s._v(" "),n("td",[s._v("返回字典 d 中使用的所有键的列表。")])]),s._v(" "),n("tr",[n("td",[s._v("len(d)")]),s._v(" "),n("td",[s._v("返回字典 d 中的项数")])]),s._v(" "),n("tr",[n("td",[s._v("d[key]")]),s._v(" "),n("td",[s._v("返回 d 中以 key 为键的项。 如果映射中不存在 key 则会引发 KeyError。")])]),s._v(" "),n("tr",[n("td",[s._v("d[key] = value")]),s._v(" "),n("td",[s._v("将 d[key] 设为 value。")])]),s._v(" "),n("tr",[n("td",[s._v("del d[key]")]),s._v(" "),n("td",[s._v("将 d[key] 从 d 中移除。 如果映射中不存在 key 则会引发 KeyError。")])]),s._v(" "),n("tr",[n("td",[s._v("key in d")]),s._v(" "),n("td",[s._v("如果 d 中存在键 key 则返回 True，否则返回 False。")])]),s._v(" "),n("tr",[n("td",[s._v("key not in d")]),s._v(" "),n("td",[s._v("等价于 not key in d。")])]),s._v(" "),n("tr",[n("td",[s._v("iter(d)")]),s._v(" "),n("td",[s._v("返回以字典的键为元素的迭代器。 这是 iter(d.keys()) 的快捷方式。")])]),s._v(" "),n("tr",[n("td",[s._v("clear()")]),s._v(" "),n("td",[s._v("移除字典中的所有元素。")])]),s._v(" "),n("tr",[n("td",[s._v("copy()")]),s._v(" "),n("td",[s._v("返回原字典的浅拷贝。")])]),s._v(" "),n("tr",[n("td",[s._v("get(key[, default])")]),s._v(" "),n("td",[s._v("如果 key 存在于字典中则返回 key 的值，否则返回 default。 如果 default 未给出则默认为 None，因而此方法绝不会引发 KeyError。")])]),s._v(" "),n("tr",[n("td",[s._v("items()")]),s._v(" "),n("td",[s._v("返回由字典项 ((键, 值) 对) 组成的一个新视图。 参见 视图对象文档。")])]),s._v(" "),n("tr",[n("td",[s._v("keys()")]),s._v(" "),n("td",[s._v("返回由字典键组成的一个新视图。 参见 视图对象文档。")])]),s._v(" "),n("tr",[n("td",[s._v("pop(key[, default])")]),s._v(" "),n("td",[s._v("如果 key 存在于字典中则将其移除并返回其值，否则返回 default。 如果 default 未给出且 key 不存在于字典中，则会引发 KeyError。")])]),s._v(" "),n("tr",[n("td",[s._v("popitem()")]),s._v(" "),n("td",[s._v("从字典中移除并返回一个 (键, 值) 对。 键值对会按 LIFO 的顺序被返回。在 3.7 版更改: 现在会确保采用 LIFO 顺序。 在之前的版本中，popitem() 会返回一个任意的键/值对。")])]),s._v(" "),n("tr",[n("td",[s._v("reversed(d)")]),s._v(" "),n("td",[s._v("返回一个逆序获取字典键的迭代器。 这是 reversed(d.keys()) 的快捷方式。注意，这个在python3.8才支持")])]),s._v(" "),n("tr",[n("td",[s._v("setdefault(key[, default])")]),s._v(" "),n("td",[s._v("如果字典存在键 key ，返回它的值。如果不存在，插入值为 default 的键 key ，并返回 default 。 default 默认为 None。")])]),s._v(" "),n("tr",[n("td",[s._v("update([other])")]),s._v(" "),n("td",[s._v("使用来自 other 的键/值对更新字典，覆盖原有的键。 返回 None。update() 接受另一个字典对象，或者一个包含键/值对（以长度为二的元组或其他可迭代对象表示）的可迭代对象。 如果给出了关键字参数，则会以其所指定的键/值对更新字典: d.update(red=1, blue=2)。")])]),s._v(" "),n("tr",[n("td",[s._v("values()")]),s._v(" "),n("td",[s._v("返回由字典值组成的一个新视图,在 3.7 版更改: 字典顺序会确保为插入顺序")])])])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"标准库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准库","aria-hidden":"true"}},[this._v("#")]),this._v(" --------- 标准库 --------")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"字符与编码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符与编码","aria-hidden":"true"}},[this._v("#")]),this._v(" 字符与编码")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"base64"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base64","aria-hidden":"true"}},[this._v("#")]),this._v(" base64")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"数学"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数学","aria-hidden":"true"}},[this._v("#")]),this._v(" 数学")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"math"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#math","aria-hidden":"true"}},[this._v("#")]),this._v(" math")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"random"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#random","aria-hidden":"true"}},[this._v("#")]),this._v(" random")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import random\nrandom.seed()\nrandom.randint(0, 100)\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"正则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"re"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#re","aria-hidden":"true"}},[this._v("#")]),this._v(" re")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"时间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间","aria-hidden":"true"}},[this._v("#")]),this._v(" 时间")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"time-时间的访问和转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#time-时间的访问和转换","aria-hidden":"true"}},[this._v("#")]),this._v(" time --- 时间的访问和转换")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"文件与操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件与操作系统","aria-hidden":"true"}},[this._v("#")]),this._v(" 文件与操作系统")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"os-操作系统接口模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#os-操作系统接口模块","aria-hidden":"true"}},[this._v("#")]),this._v(" os --- 操作系统接口模块")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"io-处理流的核心工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#io-处理流的核心工具","aria-hidden":"true"}},[this._v("#")]),this._v(" io --- 处理流的核心工具")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"path-py"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#path-py","aria-hidden":"true"}},[this._v("#")]),this._v(" path.py")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"shutil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shutil","aria-hidden":"true"}},[this._v("#")]),this._v(" shutil")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import shutil\nshutil.rmtree(xxxx)\n")])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"glob"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glob","aria-hidden":"true"}},[this._v("#")]),this._v(" glob")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('import glob\nfor file in glob.glob("./*.txt") :\n    print(file)\n')])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"fnmatch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fnmatch","aria-hidden":"true"}},[this._v("#")]),this._v(" fnmatch")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('import os, fnmatch\n\nfor file in os.listdir(".") :\n    if fnmatch.fnmatch(file, "*.txt") :\n        print(file)\n')])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br"),t("span",{staticClass:"line-number"},[this._v("4")]),t("br"),t("span",{staticClass:"line-number"},[this._v("5")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"tempfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tempfile","aria-hidden":"true"}},[this._v("#")]),this._v(" tempfile")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"stringio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stringio","aria-hidden":"true"}},[this._v("#")]),this._v(" StringIO")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('f = io.StringIO("some initial text data")\n')])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"csv-csv-文件读写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csv-csv-文件读写","aria-hidden":"true"}},[this._v("#")]),this._v(" csv --- CSV 文件读写")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"configparser-configuration-file-parser"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configparser-configuration-file-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" configparser --- Configuration file parser")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"数据压缩和存档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据压缩和存档","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据压缩和存档")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"zlib-与-gzip-兼容的压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zlib-与-gzip-兼容的压缩","aria-hidden":"true"}},[this._v("#")]),this._v(" zlib --- 与 gzip 兼容的压缩")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"gzip-对-gzip-格式的支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gzip-对-gzip-格式的支持","aria-hidden":"true"}},[this._v("#")]),this._v(" gzip --- 对 gzip 格式的支持")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"bz2-对-bzip2-压缩算法的支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bz2-对-bzip2-压缩算法的支持","aria-hidden":"true"}},[this._v("#")]),this._v(" bz2 --- 对 bzip2 压缩算法的支持")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"lzma-用-lzma-算法压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lzma-用-lzma-算法压缩","aria-hidden":"true"}},[this._v("#")]),this._v(" lzma --- 用 LZMA 算法压缩")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"zipfile-使用zip存档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zipfile-使用zip存档","aria-hidden":"true"}},[this._v("#")]),this._v(" zipfile --- 使用ZIP存档")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"tarfile-读写tar归档文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tarfile-读写tar归档文件","aria-hidden":"true"}},[this._v("#")]),this._v(" tarfile --- 读写tar归档文件")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 异常处理")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"exception"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exception","aria-hidden":"true"}},[this._v("#")]),this._v(" Exception")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h2",{attrs:{id:"线程与进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程","aria-hidden":"true"}},[this._v("#")]),this._v(" 线程与进程")])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"threading"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threading","aria-hidden":"true"}},[this._v("#")]),this._v(" threading")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import threading\nimport time\n\ndef my_thread() :\n    print("Thread started!")\n    time.sleep(3)\n    print("Thread finished!")\n\nthreading.Thread(target=my_thread).start()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('import threading\nimport time\nfrom __future__ import print_function\n\nclass MyThread(threading.Thread) :\n    def run(self) :\n        print("{} started!".format(self.getName()))\n        time.sleep(3)\n        print("{} finished!".format(self.getName()))\n\nif __name__ == "__main__" :\n    for n in range(10) :\n        mythread = MyThread(name = "Thread-{}".format(n + 1))\n        mythread.start()\n        time.sleep(1)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"subprocess"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#subprocess","aria-hidden":"true"}},[this._v("#")]),this._v(" subprocess")])},function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('import subprocess\noutput = subprocess.check_output(["dir"])  # 获取当前目录的内容\noutput = subprocess.check_output(["netstat", "-an"])  # 获取当前网络链接\n')])]),this._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[this._v("1")]),t("br"),t("span",{staticClass:"line-number"},[this._v("2")]),t("br"),t("span",{staticClass:"line-number"},[this._v("3")]),t("br")])])},function(){var s=this.$createElement,t=this._self._c||s;return t("h3",{attrs:{id:"multiprocessing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#multiprocessing","aria-hidden":"true"}},[this._v("#")]),this._v(" multiprocessing")])},function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from multiprocessing import Process, Lock\n\ndef f(lock, n) :\n    lock.acquire()\n    print("hello world %d" % n)\n    lock.release()\n\nif __name__ == "__main__" :\n    lock = Lock()\n    for num in range(10):\n        Process(target=f, args=(lock, num)).start()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])}],!1,null,null,null);a.options.__file="py-basic.md";t.default=a.exports}}]);